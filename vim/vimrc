let mapleader = ","

" Disable vi compatibility (emulation of old bugs)
set nocompatible

" turn filetype detection off and, even if it's not strictly
" necessary, disable loading of indent scripts and filetype plugins
filetype off
filetype plugin indent off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Plugin 'preservim/nerdtree'
" Nerd Tree shortcut
let NERDTreeShowHidden=1                            " Always show hidden files
map <C-n> :NERDTreeToggle<CR>                       " Ctrl-N for toggle

" setup compile_commands.json for a project
" cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
" ln -s Debug/compile_commands.json .
Plugin 'ncm2/ncm2'
Plugin 'roxma/nvim-yarp'
Plugin 'ncm2/ncm2-bufword'

" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()

Plugin 'ncm2/ncm2-path'
Plugin 'ncm2/ncm2-pyclang'
let g:ncm2_pyclang#library_path = '/usr/lib/llvm-9/lib/libclang.so.1'

" IMPORTANT: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect

" Use <TAB> to select the popup menu:
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" don't give |ins-completion-menu| messages.
set shortmess+=c

Plugin 'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins' }
nnoremap <F5> :GdbStart gdb -q <CR> <C-w>H <C-w>r

Plugin 'octol/vim-cpp-enhanced-highlight'
" vim-cpp-enhanced-highlight settings
let g:cpp_class_scope_highlight = 1                 " Highlighting of class scope
let g:cpp_member_variable_highlight = 1             " Highlighting of member variables
let g:cpp_class_decl_highlight = 1                  " Highlighting of class names in declarations
let g:cpp_experimental_template_highlight = 1       " Highlight template functions.

Plugin 'christoomey/vim-tmux-navigator'
Plugin 'majutsushi/tagbar'
Plugin 'pseewald/nerdtree-tagbar-combined.git'
map <C-c> :ToggleNERDTreeAndTagbar<CR>              " Ctrl-C for focus

Plugin 'ntpeters/vim-better-whitespace'
" whitespace setting 'StripWhitespace' to remove all whitespaces
let g:better_whitespace_enabled=1
" let g:strip_whitespace_on_save=1

Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
" FZF setting to behave at ctrlp
let g:fzf_action = {
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit'
      \ }
nnoremap <c-p> :Files<cr>

Plugin 'altercation/vim-colors-solarized'
" solarized settings
let g:solarized_bold = 0
let g:solarized_contrast = "low"
let g:solarized_termcolors = 256

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Airline settings
let g:airline_powerline_fonts = 1
let g:airline_left_alt_sep = '>'
let g:airline_right_alt_sep = '<'
let g:airline#extensions#tabline#enabled = 1
let g:lightline = {
  \ 'colorscheme': 'edge',
  \ }

Plugin 'rhysd/vim-clang-format'
let g:clang_format#code_style = 'llvm'

Plugin 'machakann/vim-highlightedyank'
Plugin 'airblade/vim-gitgutter'

Plugin 'tpope/vim-fugitive'
Plugin 'sickill/vim-monokai'
Plugin 'morhetz/gruvbox'
Plugin 'sainnhe/edge'

let $NVIM_PYTHON_LOG_FILE="/tmp/nvim_log"
let $NVIM_PYTHON_LOG_LEVEL="DEBUG"

" Turn on filetype detection, indent scripts and filetype plugins on
" Need not to do filetype on as the below is superfluous
filetype plugin indent on

" Essential settings
set nu                                              " enable line numbers
set softtabstop=2
set shiftwidth=2
set expandtab

set autoindent                                      " use indentation of previous line
set smartindent                                     " use intelligent indentation for C
set tabstop=4                                       " tab width is 4 spaces
set expandtab                                       " expand tabs to spaces
set showmatch                                       " highlight matching braces
set hlsearch
set encoding=utf-8
set cursorline
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:↲,extends:⟩,precedes:⟨
"set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,
set nolist
set colorcolumn=80

" read/write files when switching buffers
set autoread
set autowrite

" Capitals invoke case-insensitive search
set ignorecase
set smartcase

" Persist undo even after vim/neovim is closed and reopened
set undodir=~/.vim/undo
set undofile
" Custom mappings
"
nnoremap <Leader>r :%s///g<LEFT><LEFT>
nnoremap <Leader>rc :%s///gc<LEFT><LEFT><LEFT>

xnoremap <Leader>r :%s///g<LEFT><LEFT>
xnoremap <Leader>rc :%s///gc<LEFT><LEFT><LEFT>


if has('nvim')
  " nvim don't set numbers for the terminal
  au TermOpen * setlocal nonumber norelativenumber

  tnoremap <Esc> <C-\><C-n>

  tnoremap <A-h> <C-\><C-n><C-w>h
  tnoremap <A-j> <C-\><C-n><C-w>j
  tnoremap <A-k> <C-\><C-n><C-w>k
  tnoremap <A-l> <C-\><C-n><C-w>l

  nnoremap <A-h> <C-w>h
  nnoremap <A-j> <C-w>j
  nnoremap <A-k> <C-w>k
  nnoremap <A-l> <C-w>l

  hi! TermCursorNC ctermfg=15 guifg=#fdf6e3 ctermbg=14 guibg=#93a1a1 cterm=NONE gui=NONE
endif

" Setup for ripgrep
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  nnoremap <Leader>g :silent lgrep<Space>
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

map <C-K> :pyf ~/.vim/clang-format.py<CR>
imap <C-K> <c-o>:pyf ~/.vim/clang-format.py<CR>

" Use tab to shift to next buffer and SHIFT-tab to previous buffer
nnoremap  <silent>   <tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bnext<CR>
nnoremap  <silent> <s-tab>  :if &modifiable && !&readonly && &modified <CR> :write<CR> :endif<CR>:bprevious<CR>

" Reset behaviour of ctrl + arrow keys
execute "set <xUp>=\e[1;*A"
execute "set <xDown>=\e[1;*B"
execute "set <xRight>=\e[1;*C"
execute "set <xLeft>=\e[1;*D"

" ctags settings
nnoremap <C-]> g<C-]>

set backupdir=~/.vim/backup/                        " In case you delete something accidently
set directory=~/.vim/swp/                           " Get rid of swap files too

set encoding=utf-8                                  " The encoding displayed.
set fileencoding=utf-8                              " The encoding written to file.

" Spell check for markdown files and git commit.
" Help - Add a word to dictionary using 'zg' and 'z=' to correct.
autocmd FileType gitcommit setlocal spell
autocmd BufRead,BufNewFile *.md setlocal spell
set spellfile=~/.vim/spell/en.utf-8.add

function! TerminalPreviewMarkdown()
	vert new % | terminal ! mdv %
endfu

map <silent> <leader>m :call TerminalPreviewMarkdown()<CR>

syntax on
set background=dark
colorscheme edge
"colorscheme gruvbox
"colorscheme tender
"colorscheme monokai
"colorscheme koehler                                 " Hack to make monokai better
"colorscheme monokai
"colorscheme desert
"colorscheme solarized

" Diff mode works better with light backgroud
if &diff
    colorscheme gruvbox
    "set background=light
end
